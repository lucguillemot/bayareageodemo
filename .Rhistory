sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
my_vector <- 1:"0"
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector <- my_matrix
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
my_data <- colnames(cnames)
colnames(my_data) <- cnames
my_data
exit()
q()
library(datasets)
airquality
hist(airquality$Ozone)
rug(airquality$Ozone)
hist(airquality$Ozone, breaks=50)
hist(airquality$Ozone, breaks=100)
with(subset(airquality, Month==5),points(Wind, Ozone, col="blue"))
quartz()
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
diet
str(nlme)
str(BodyWeight)
?llines
?splom
?trellis.par.set
?print.trellis
?par
library(datasets)
data(airquality)
qplot(Ozone, Wind, data=airquality)
library(ggplot2)
qplot(Ozone, Wind, data=airquality)
qplot(Ozone, Wind, data=airquality, color=Month)
qplot(Ozone, Wind, data=airquality, facets=.~Month)
qplot(Ozone, Wind, data=airquality, facets=.~factor(Month)
qplot(Ozone, Wind, data=airquality, facets=.~factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Ozone, Wind, data=airquality, facets=.~Month)
library(movies)
library(Movies)
data(movies)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies)+geom_smotth()
qplot(votes, rating, data=movies)+geom_smooth()
load("~/Documents/DOCUMENTS/RESEARCH/postdoc/maps/FR2015/data/RG2015/RG2015.RData")
load("~/Documents/DOCUMENTS/RESEARCH/postdoc/maps/FR2015/data/RG2015/RG2015.RData")
quantile(RG2015$PCfn, probs=c(0.2,0.4,0.6,0.8,1))
max(RG2015$PCfn)
setwd("~/Documents/research/postdoc/geodemographics")
source("data/util.R")
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize data (square root + range standardization)
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform hierarchical clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st, years[i]),
env = .GlobalEnv)
# Export csv data file with raw data + cluster number
# used in the d3 plot of raw variables
sfba.var.cl <- paste("sfba.var.cl.", years[i], sep = "")
var <- get(paste("sfbact.cc.", years[i], sep = ""))
clust <- get(paste("sfbact.hc.cl.", years[i], sep = ""))
assign(sfba.var.cl,
exportVarData(var, clust, years[i]),
env = .GlobalEnv)
# Calculate means, distances to the mean
# and export data for the radar plot
cl <- get(paste("sfbact.hc.cl.", years[i], sep = ""))
cl.means <- paste("cl.means.", years[i], sep = "")
assign(cl.means,
radarPlotData(st, cl, years[i]),
env = .GlobalEnv)
}
View(cl.means.2014)
View(sfbact.cc.st.2014)
View(sfbact.cc.2014)
st.2009 <- sfbact.cc.st.2009
st.2010 <- sfbact.cc.st.2010
st.2011 <- sfbact.cc.st.2011
st.2012 <- sfbact.cc.st.2012
st.2013 <- sfbact.cc.st.2013
st.2014 <- sfbact.cc.st.2014
st.2009 <- st.2009 %>% mutate(year = 2009)
st.2010 <- st.2010 %>% mutate(year = 2010)
st.2011 <- st.2011 %>% mutate(year = 2011)
st.2012 <- st.2012 %>% mutate(year = 2012)
st.2013 <- st.2013 %>% mutate(year = 2013)
st.2014 <- st.2014 %>% mutate(year = 2014)
View(st.2009)
st.years <- rbind(st.2009, st.2010, st.2011, st.2012, st.2013, st.2014)
View(st.years)
st.years.geo <- st.years %>% select(Geo_FIPS,year)
View(st.years.geo)
st.years$Geo_FIPS <- NULL
st.years$year <- NULL
st.years.thc <- st.years %>% dist(method = "euclidean") %>% hclust(method = "complete")
pdf("data/dendrogram/thclust-dendrogram.pdf")
sfbact.dend <- years.thc %>%
as.dendrogram %>%
set("branches_k_color", k = nclass, value=colors) %>%
plot
dev.off()
years.thc <- st.years %>% dist(method = "euclidean") %>% hclust(method = "complete")
# Display and export the dendrogram
## The colors don't correspond to those on the map...
pdf("data/dendrogram/thclust-dendrogram.pdf")
sfbact.dend <- years.thc %>%
as.dendrogram %>%
set("branches_k_color", k = nclass, value=colors) %>%
plot
dev.off()
# Find the clusters and assign them to the corresponding Census Tract
# k = number of classes (where to cut the tree)
years.thc.cuts <- data.frame(cutree(years.thc,k=nclass))
View(years.thc.cuts)
years.thc.clusters <- cbind(years.geo,years.thc.cuts) %>%
select(Geo_FIPS, cluster = cutree.years.thc..k...nclass.)
st.2009 <- sfbact.cc.st.2009
st.2010 <- sfbact.cc.st.2010
st.2011 <- sfbact.cc.st.2011
st.2012 <- sfbact.cc.st.2012
st.2013 <- sfbact.cc.st.2013
st.2014 <- sfbact.cc.st.2014
st.2009 <- st.2009 %>% mutate(year = 2009)
st.2010 <- st.2010 %>% mutate(year = 2010)
st.2011 <- st.2011 %>% mutate(year = 2011)
st.2012 <- st.2012 %>% mutate(year = 2012)
st.2013 <- st.2013 %>% mutate(year = 2013)
st.2014 <- st.2014 %>% mutate(year = 2014)
st.years <- rbind(st.2009, st.2010, st.2011, st.2012, st.2013, st.2014)
years.geo <- st.years %>% select(Geo_FIPS,year)
st.years$Geo_FIPS <- NULL
st.years$year <- NULL
# Perform (temporal) hierarchical clustering
years.thc <- st.years %>% dist(method = "euclidean") %>% hclust(method = "complete")
pdf("data/dendrogram/thclust-dendrogram.pdf")
sfbact.dend <- years.thc %>%
as.dendrogram %>%
set("branches_k_color", k = nclass, value=colors) %>%
plot
dev.off()
# Find the clusters and assign them to the corresponding Census Tract
# k = number of classes (where to cut the tree)
years.thc.cuts <- data.frame(cutree(years.thc,k=nclass))
years.thc.clusters <- cbind(years.geo,years.thc.cuts) %>%
select(Geo_FIPS, cluster = cutree.years.thc..k...nclass.)
View(years.thc.clusters)
# Export to CSV
for (i in 1:length(years)) {
df <- filter(years.thc.clusters, year==years[i])
write.csv(df,
file=paste("data/temphclust/complete/sfbact-clusters-",
years[i],
".csv",
sep=""))
}
years <- c("2009","2010","2011","2012","2013","2014")
# Export to CSV
for (i in 1:length(years)) {
df <- filter(years.thc.clusters, year==years[i])
write.csv(df,
file=paste("data/temphclust/complete/sfbact-clusters-",
years[i],
".csv",
sep=""))
}
View(years.thc.clusters)
View(years.geo)
View(years.thc.cuts)
View(years.geo)
years.thc.clusters <- cbind(years.geo,years.thc.cuts) %>%
select(Geo_FIPS, year = year, cluster = cutree.years.thc..k...nclass.)
# Export to CSV
for (i in 1:length(years)) {
df <- filter(years.thc.clusters, year==years[i])
write.csv(df,
file=paste("data/temphclust/complete/sfbact-clusters-",
years[i],
".csv",
sep=""))
}
years.thclust <- clusteringByYear(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
source("data/temporalhclust.R")
# Perform (temporal) hierarchical clustering
years.thclust <- temporalClustering(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
View(years.thclust)
View(years.thclust)
tcl.2009 <- years.thclust %>% filter(year == 2009)
View(tcl.2009)
tcl.2010 <- years.thclust %>% filter(year == 2010)
tcl.2011 <- years.thclust %>% filter(year == 2011)
tcl.2012 <- years.thclust %>% filter(year == 2012)
tcl.2013 <- years.thclust %>% filter(year == 2013)
tcl.2014 <- years.thclust %>% filter(year == 2014)
exportTempVarData(sfbact.cc.2009, tcl.2009, 2009)
source("data/temporalhclust.R")
exportTempVarData(sfbact.cc.2009, tcl.2009, 2009)
exportTempVarData(sfbact.cc.2010, tcl.2010, 2010)
exportTempVarData(sfbact.cc.2011, tcl.2011, 2011)
exportTempVarData(sfbact.cc.2012, tcl.2012, 2012)
exportTempVarData(sfbact.cc.2013, tcl.2013, 2013)
exportTempVarData(sfbact.cc.2014, tcl.2014, 2014)
View(sfbact.cc.st.2014)
radarPlotTempData(sfbact.cc.st.2009, tcl.2009, 2009)
source("data/temporalhclust.R")
radarPlotTempData(sfbact.cc.st.2009, tcl.2009, 2009)
radarPlotTempData(sfbact.cc.st.2010, tcl.2010, 2010)
radarPlotTempData(sfbact.cc.st.2011, tcl.2011, 2011)
radarPlotTempData(sfbact.cc.st.2012, tcl.2012, 2012)
radarPlotTempData(sfbact.cc.st.2013, tcl.2013, 2013)
radarPlotTempData(sfbact.cc.st.2014, tcl.2014, 2014)
nclass <- 6
# Perform (temporal) hierarchical clustering
years.thclust <- temporalClustering(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
# used in the d3 plot of raw variables
tcl.2009 <- years.thclust %>% filter(year == 2009)
tcl.2010 <- years.thclust %>% filter(year == 2010)
tcl.2011 <- years.thclust %>% filter(year == 2011)
tcl.2012 <- years.thclust %>% filter(year == 2012)
tcl.2013 <- years.thclust %>% filter(year == 2013)
tcl.2014 <- years.thclust %>% filter(year == 2014)
exportTempVarData(sfbact.cc.2009, tcl.2009, 2009)
exportTempVarData(sfbact.cc.2010, tcl.2010, 2010)
exportTempVarData(sfbact.cc.2011, tcl.2011, 2011)
exportTempVarData(sfbact.cc.2012, tcl.2012, 2012)
exportTempVarData(sfbact.cc.2013, tcl.2013, 2013)
exportTempVarData(sfbact.cc.2014, tcl.2014, 2014)
# Calculate means, distances to the mean
# and export data for the radar plot
radarPlotTempData(sfbact.cc.st.2009, tcl.2009, 2009)
radarPlotTempData(sfbact.cc.st.2010, tcl.2010, 2010)
radarPlotTempData(sfbact.cc.st.2011, tcl.2011, 2011)
radarPlotTempData(sfbact.cc.st.2012, tcl.2012, 2012)
radarPlotTempData(sfbact.cc.st.2013, tcl.2013, 2013)
radarPlotTempData(sfbact.cc.st.2014, tcl.2014, 2014)
nclass <- 10
# Perform (temporal) hierarchical clustering
years.thclust <- temporalClustering(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
# Export csv data file with raw data + cluster number
# used in the d3 plot of raw variables
tcl.2009 <- years.thclust %>% filter(year == 2009)
tcl.2010 <- years.thclust %>% filter(year == 2010)
tcl.2011 <- years.thclust %>% filter(year == 2011)
tcl.2012 <- years.thclust %>% filter(year == 2012)
tcl.2013 <- years.thclust %>% filter(year == 2013)
tcl.2014 <- years.thclust %>% filter(year == 2014)
exportTempVarData(sfbact.cc.2009, tcl.2009, 2009)
exportTempVarData(sfbact.cc.2010, tcl.2010, 2010)
exportTempVarData(sfbact.cc.2011, tcl.2011, 2011)
exportTempVarData(sfbact.cc.2012, tcl.2012, 2012)
exportTempVarData(sfbact.cc.2013, tcl.2013, 2013)
exportTempVarData(sfbact.cc.2014, tcl.2014, 2014)
# Calculate means, distances to the mean
# and export data for the radar plot
radarPlotTempData(sfbact.cc.st.2009, tcl.2009, 2009)
radarPlotTempData(sfbact.cc.st.2010, tcl.2010, 2010)
radarPlotTempData(sfbact.cc.st.2011, tcl.2011, 2011)
radarPlotTempData(sfbact.cc.st.2012, tcl.2012, 2012)
radarPlotTempData(sfbact.cc.st.2013, tcl.2013, 2013)
radarPlotTempData(sfbact.cc.st.2014, tcl.2014, 2014)
source("lib_var.R")
source("data/util.R")
source("data/temporalhclust.R")
source("data/lib_var.R")
source("data/util.R")
source("data/temporalhclust.R")
nclass <- 10
View(years.thclust)
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
exportTempVarData <- function(var, clust, year) {
cl.year <- clust %>% filter(year == year)
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
year,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
var <- get(paste("sfbact.cc.", years[i], sep = ""))
var
exportTempVarData <- function(var, clust, year) {
#print(clust)
cl.year <- clust %>% filter(year == year)
print(cl.years)
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
year,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
exportTempVarData <- function(var, clust, year) {
#print(clust)
cl.year <- clust %>% filter(year == year)
print(cl.year)
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
year,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
exportTempVarData <- function(var, clust, year) {
#print(clust)
cl.year <- clust %>% filter(year == year)
print(cl.year)
print("coucou")
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
year,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
View(years.thclust)
################################################################################
exportTempVarData <- function(var, clust, cyear) {
#print(clust)
cl.year <- clust %>% filter(year==cyear)
print(cl.year)
print("coucou")
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
year,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
exportTempVarData <- function(var, clust, cyear) {
#print(clust)
cl.year <- clust %>% filter(year==cyear)
print(cl.year)
print("coucou")
sfba.var.cl <- inner_join(var, cl.year, by = "Geo_FIPS")
write.csv(sfba.var.cl,
file=paste("data/var/thclust/sfbact-var-",
cyear,
".csv",
sep = ""))
} # exportTempVarData
for (i in 1:length(years)) {
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
}
# Perform (temporal) hierarchical clustering
years.thclust <- temporalClustering(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
for (i in 1:length(years)) {
# Export csv data file with raw data + cluster number
# used in the d3 plot of raw variables
var <- get(paste("sfbact.c.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
# Calculate means, distances to the mean
# and export data for the radar plot
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
radarPlotTempData(st, years.thclust, years[i])
}
for (i in 1:length(years)) {
# Export csv data file with raw data + cluster number
# used in the d3 plot of raw variables
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
# Calculate means, distances to the mean
# and export data for the radar plot
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
radarPlotTempData(st, years.thclust, years[i])
}
source("data/lib_var.R")
source("data/util.R")
source("data/temporalhclust.R")
nclass <- 15
nclass
# # # # # # # # # # # # # # # # # #
# # # All years together # # # # #
# # # # # # # # # # # # # # # # # #
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize data (square root + range standardization)
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
}
# Perform (temporal) hierarchical clustering
years.thclust <- temporalClustering(sfbact.cc.st.2009,
sfbact.cc.st.2010,
sfbact.cc.st.2011,
sfbact.cc.st.2012,
sfbact.cc.st.2013,
sfbact.cc.st.2014)
for (i in 1:length(years)) {
# Export csv data file with raw data + cluster number
# used in the d3 plot of raw variables
var <- get(paste("sfbact.cc.", years[i], sep = ""))
exportTempVarData(var, years.thclust, years[i])
# Calculate means, distances to the mean
# and export data for the radar plot
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
radarPlotTempData(st, years.thclust, years[i])
}
