medianAge=medianAge-means[11],
PCraceWhiteAlone=PCraceWhiteAlone-means[12],
PCraceBlackAlone=PCraceBlackAlone-means[13],
PCraceAsianAlone=PCraceAsianAlone-means[14],
PCraceHispanic=PCraceHispanic-means[15],
PCforeignBorn=PCforeignBorn-means[16],
PCownerOccUnits=PCownerOccUnits-means[17],
PCwithInterests=PCwithInterests-means[18],
perCapitaIncome=perCapitaIncome-means[19],
PCunemployed=PCunemployed-means[20],
PCpoorStruggling=PCpoorStruggling-means[21],
PCveryWealthyHHolds=PCveryWealthyHHolds-means[22]
)
View(cl2014.means.dev)
source("http://pcwww.liv.ac.uk/~william/Geodemographic%20Classifiability/func%20CreateRadialPlot.r")
CreateRadialPlot(cl2014.means.dev, plot.extent.x = 1.5)  #Default plot.extent amended to include all of axis label text
source("http://pcwww.liv.ac.uk/~william/Geodemographic%20Classifiability/func%20CreateRadialPlot.r")
CreateRadialPlot(cl2014.means.dev, plot.extent.x = 1.5)  #Default plot.extent amended to include all of axis label text
melted <- melt(cl2014.means.dev)
View(melted)
melted$cluster <- 1:10
melted <- melted[-c(1:10),]
View(melted)
# Plot the distances to the mean for each variable, for each cluster
png("data/clusters_desc.png",
width = 500,
height = 1000) ## Open the PNG device
g <- ggplot(melted, aes(variable,value, fill=factor(cluster)))
g+facet_grid(cluster~.)+geom_bar(stat="identity")
dev.off()
source("data/radialPlot.R")
CreateRadialPlot(cl2014.means.dev, plot.extent.x = 1.5)
plot.data <- cl2014.means.dev[,-1]
View(plot.data)
CreateRadialPlot(plot.data, plot.extent.x = 1.5)  #Default plot.extent amended to include all of axis label text
source("data/radialPlot.R")
plot.data <- cl2014.means.dev[,-1]
source("data/radialPlot.R")
plot.data <- cl2014.means.dev[,-1]
CreateRadialPlot(plot.data, plot.extent.x = 1.5)
CreateRadialPlot(plot.data, plot.extent.x = 1.5)
source("data/radialPlot.R")
CreateRadialPlot(plot.data, plot.extent.x = 1.5)
CreateRadialPlot(plot.data)
plot.data <- cl2014.means.dev[-c(4:10),-c(4:22)]
View(plot.data)
CreateRadialPlot(plot.data)
plot.data <- cl2014.means.dev[-c(3:10),-c(10:23)]
View(plot.data)
source("data/radialPlot.R")
CreateRadialPlot(plot.data)
names(plot.data[1])
names(plot.data[1]) <- "group"
View(plot.data)
View(plot.data)
names(plot.data[1]) <- c("group")
View(plot.data)
names(plot.data[1]) <- "group"
View(plot.data)
names(plot.data)[1] <- "group"
View(plot.data)
source("data/radialPlot.R")
CreateRadialPlot(plot.data)
CreateRadialPlot(plot.data, plot.extent.x = 1.5, grid.min = -0.4, centre.y = -0.5,
label.centre.y = TRUE, label.gridline.min = FALSE)
View(cl2014.means)
cl2014.means.melted <- melt(cl2014.means)
?melt
View(cl2014.means.melted)
apply(cl2014.means, 1, toJSON(nodes, pretty = T))
apply(cl2014.means, 1, toJSON(pretty = T))
apply(cl2014.means, 1, toJSON)
y2010 <- sfbact.hc.clusters %>% filter(year==2010)
cl2014.means.1 <- cl2014.means[1,]
View(cl2014.means.1)
toJSON(cl2014.means.1, pretty = T)
toJSON(cl2014.means, pretty = T)
View(cl2014.means.melted)
cl2014.means.1.melted <- melt(cl2014.means.1)
View(cl2014.means.1.melted)
toJSON(cl2014.means.1.melted, pretty = T)
cl2014.means.var <- cl2014.means[,1]
View(cl2014.means.var)
cl2014.means.var <- cl2014.means[,-1]
View(cl2014.means.var)
cl2014.means.1 <- cl2014.means[1,]
View(cl2014.means.1)
cl2014.means.1 <- cl2014.means.var[1,]
View(cl2014.means.1)
cl2014.means.1.melted <- melt(cl2014.means.1)
View(cl2014.means.melted)
cl2014.means.var <- cl2014.means[,-1]
cl2014.means.1 <- cl2014.means.var[1,]
cl2014.means.1.melted <- melt(cl2014.means.1)
View(cl2014.means.1.melted)
names(cl2014.means.1.melted) <- c("axis", "value")
View(cl2014.means.1.melted)
toJSON(cl2014.means.1.melted, pretty = T)
cl2014.means.var <- cl2014.means[,-1]
for (i in length(cl2014.means.var)) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
}
cl2014.means.var
View(cl2014.means.var)
i <- 1
cl2014.means.i <- cl2014.means.var[i,]
View(cl2014.means.i)
cl2014.means.i.melted <- melt(cl2014.means.i)
View(cl2014.means.1.melted)
View(cl2014.means.i.melted)
names(cl2014.means.i.melted) <- c("axis", "value")
View(cl2014.means.i.melted)
print(toJSON(cl2014.means.i.melted, pretty = T))
i <- 2
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
i <- length(cl2014.means.var)
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
i <- length(cl2014.means.var)-1
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
i <- (length(cl2014.means.var)-1)
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
print(toJSON(cl2014.means.i.melted, pretty = T))
}
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i,] <- toJSON(cl2014.means.i.melted, pretty = T)
}
?data.frame
json.df <- data.frame()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i,] <- toJSON(cl2014.means.i.melted, pretty = T)
}
View(json.df)
json.df <- data.frame()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i,1] <- toJSON(cl2014.means.i.melted, pretty = T)
}
View(json.df)
json.df <- data.frame()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[1,i] <- toJSON(cl2014.means.i.melted, pretty = T)
}
json.df <- data.frame()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i,1] <- toJSON(cl2014.means.i.melted, pretty = T)
}
View(json.df)
json.df <- data.frame()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i,] <- toJSON(cl2014.means.i.melted, pretty = T)
}
json.list <- list()
json.list <- list()
for (i in nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- toJSON(cl2014.means.i.melted, pretty = T)
}
json.list <- list()
for (i in 1:nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- toJSON(cl2014.means.i.melted, pretty = T)
}
json.df <- data.frame()
json.list <- list()
for (i in 1:nclass) {
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i, 1] <- toJSON(cl2014.means.i.melted, pretty = T)
}
View(json.df)
apply(json.df, 2, toJSON)
write(apply(json.df, 2, toJSON), "data/radar/radar.json")
json.df[1,1]
toJSON(json.df)
toJSON(cl2014.means.var)
json.df <- data.frame()
for (i in 1:nclass) { # 10 classes
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.df[i, 1] <- toJSON(cl2014.means.i.melted, pretty = F)
}
toJSON(json.df)
write(apply(json.df, 2, toJSON), "data/radar/radar.json")
View(json.df)
write(json.df[1, ], "data/radar/radar.json")
write(json.df, "data/radar/radar.json")
apply(json.df,1,write("data/radar/radar.json"))
toJSON(json.df)
json <- apply(json.df, 1, paste)
apply(json.df, 1, paste)
json.ls <- as.list(json.df)
json.list <- list()
for (i in 1:nclass) { # 10 classes
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- toJSON(cl2014.means.i.melted, pretty = F)
}
json.list <- list()
for (i in 1:nclass) { # 10 classes
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.i.melted
}
toJSON(json.list)
write(toJSON(json.list), "data/radar/radar.json")
write(toJSON(json.list[[1]]), "data/radar/radar-cl1.json")
write(paste("[", toJSON(json.list[[1]]), "]", sep = ""), "data/radar/radar-cl1.json")
write(paste("[", toJSON(json.list[[1]], pretty = T), "]", sep = ""), "data/radar/radar-cl1.json")
write(toJSON(json.list, pretty = T), "data/radar/radar.json")
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-cl", i, ".json", sep = ""))
}
View(cl2014.gr)
View(cl2014.means.dev)
cl2014.means.dev.var <- cl2014.means.dev[,-1]
json.list <- list()
for (i in 1:nclass) { # 10 classes
cl2014.means.dev.i <- cl2014.means.dev.var[i,]
cl2014.means.dev.i.melted <- melt(cl2014.means.dev.i)
names(cl2014.means.dev.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.dev.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar-dev.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-dev-cl", i, ".json", sep = ""))
}
source("data/util.R")
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize Data
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st),
env = .GlobalEnv)
}
source("data/util.R")
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize Data
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st),
env = .GlobalEnv)
}
source("data/util.R")
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize Data
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st),
env = .GlobalEnv)
}
?dist
View(sfbact.cc.2014)
source("data/util.R")
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize Data
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st),
env = .GlobalEnv)
}
Namen <- c("Density", "One Unit",
"Public Transit", "Less than High School",
"Some college", "PhD holder",
"Married couple", "With kids",
"Same-sex couples", "Males",
"Median age", "Whites",
"Blacks", "Asian",
"Hispanic", "Foreign-born",
"Owner-occupied", "With interests",
"Per capita income", "Unemployment",
"Poor and Struggling", "Very wealthy")
names(cl2014.means.var) <- Namen
View(cl2014.means.var)
json.list <- list()
for (i in 1:nclass) { # 10 classes
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-cl", i, ".json", sep = ""))
}
setwd("~/Documents/research/postdoc/geodemographics")
json.list <- list()
for (i in 1:nclass) { # 10 classes
cl2014.means.i <- cl2014.means.var[i,]
cl2014.means.i.melted <- melt(cl2014.means.i)
names(cl2014.means.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-cl", i, ".json", sep = ""))
}
clusteringByYear <- function(df) {
df.geo <- as.data.frame(df$Geo_FIPS)
names(df.geo) <- "Geo_FIPS"
#print(df.geo)
df$Geo_FIPS <- NULL
# calculate the distance matrix,
# and perform the clustering
sfbact.hc.complete <- df %>%
dist(method="euclidean") %>% hclust(method="average")
# Display and export the dendrogram
## The colors don't correspond to those on the map...
pdf(paste("data/dendrogram-",year,".pdf", sep=""))
sfbact.dend <- sfbact.hc.complete %>%
as.dendrogram %>%
set("branches_k_color", k = nclass, value=colors) %>%
plot
dev.off()
# Find the clusters and assign them to the corresponding Census Tract
# k = number of classes (where to cut the tree)
sfbact.hc.complete.cuts <- data.frame(cutree(sfbact.hc.complete,k=nclass))
sfbact.hc.clusters <- cbind(df.geo,sfbact.hc.complete.cuts) %>%
select(Geo_FIPS, cluster = cutree.sfbact.hc.complete..k...nclass.)
# Export to CSV
write.csv(sfbact.hc.clusters,
file=paste("data/hclust/sfbact-clusters-",
year,
".csv",
sep=""))
sfbact.hc.clusters
}
for (i in 1:length(years)) {
# Create a data frame with variables for each year
sfbact.cc <- paste("sfbact.cc.", years[i], sep = "")
assign(sfbact.cc,
readAndParse(years[i], files[i]),
env = .GlobalEnv)
# Standardize Data
sfbact.cc.st <- paste("sfbact.cc.st.", years[i], sep = "")
cc <- get(paste("sfbact.cc.", years[i], sep = ""))
assign(sfbact.cc.st,
standardizeData(cc),
env = .GlobalEnv)
# Perform clustering
sfbact.hc.cl <- paste("sfbact.hc.cl.", years[i], sep = "")
st <- get(paste("sfbact.cc.st.", years[i], sep = ""))
assign(sfbact.hc.cl,
clusteringByYear(st),
env = .GlobalEnv)
}
cl2014.means.dev.var <- cl2014.means.dev[,-1]
Namen <- c("Density", "One Unit",
"Public Transit", "Less than High School",
"Some college", "PhD holder",
"Married couple", "With kids",
"Same-sex couples", "Males",
"Median age", "Whites",
"Blacks", "Asian",
"Hispanic", "Foreign-born",
"Owner-occupied", "With interests",
"Per capita income", "Unemployment",
"Poor and Struggling", "Very wealthy")
names(cl2014.means.dev.var) <- Namen
json.list <- list()
for (i in 1:nclass) { # 10 classes
# Artificially add .5 to facilitate the creation of the radar plot in D3
cl2014.means.dev.i <- cl2014.means.dev.var[i,]+0.5
cl2014.means.dev.i.melted <- melt(cl2014.means.dev.i)
names(cl2014.means.dev.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.dev.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar-dev.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-dev-cl", i, ".json", sep = ""))
}
json.list <- list()
for (i in 1:nclass) { # 10 classes
# Artificially add .5 to facilitate the creation of the radar plot in D3
cl2014.means.dev.i <- (cl2014.means.dev.var[i,]+0.5)
cl2014.means.dev.i.melted <- melt(cl2014.means.dev.i)
names(cl2014.means.dev.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.dev.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar-dev.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-dev-cl", i, ".json", sep = ""))
}
json.list <- list()
for (i in 1:nclass) { # 10 classes
# Artificially add .5 to facilitate the creation of the radar plot in D3
cl2014.means.dev.i <- cl2014.means.dev.var[i,]
cl2014.means.dev.i.melted <- melt(cl2014.means.dev.i)
names(cl2014.means.dev.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.dev.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar-dev.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-dev-cl", i, ".json", sep = ""))
}
json.list <- list()
for (i in 1:nclass) { # 10 classes
# Artificially add .5 to facilitate the creation of the radar plot in D3
cl2014.means.dev.i <- cl2014.means.dev.var[i,]+0.5
cl2014.means.dev.i.melted <- melt(cl2014.means.dev.i)
names(cl2014.means.dev.i.melted) <- c("axis", "value")
json.list[[i]] <- cl2014.means.dev.i.melted
}
# Export all clusters in one json file
write(toJSON(json.list, pretty = T), "data/radar/radar-dev.json")
# Export each cluster in a separate json file
for (i in 1:nclass) {
write(paste("[", toJSON(json.list[[i]], pretty = T), "]", sep = ""), paste("data/radar/radar-dev-cl", i, ".json", sep = ""))
}
